// Prisma Schema - Ivan Reseller Database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================
// ENUMS
// ====================================

enum Role {
  ADMIN
  USER
}

enum ProductStatus {
  PENDING
  APPROVED
  REJECTED
  PUBLISHED
  INACTIVE
}

enum SaleStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum CommissionStatus {
  PENDING
  SCHEDULED
  PAID
  FAILED
}

// ====================================
// MODELS
// ====================================

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  email             String    @unique
  passwordHash      String
  role              Role      @default(USER)
  commissionRate    Decimal   @default(10.00) @db.Decimal(5, 2)
  fixedMonthlyCost  Decimal   @default(17.00) @db.Decimal(8, 2)
  isActive          Boolean   @default(true)
  paypalEmail       String?
  phone             String?
  fullName          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?
  
  // Relations
  apiCredentials    ApiCredential[]
  products          Product[]
  sales             Sale[]
  commissions       Commission[]
  activities        Activity[]

  @@map("users")
}

model ApiCredential {
  id            Int       @id @default(autoincrement())
  userId        Int
  apiName       String    // ebay, mercadolibre, amazon, paypal, groq
  credentials   Json      // Encrypted JSON with API keys
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, apiName])
  @@map("api_credentials")
}

model Product {
  id                  Int             @id @default(autoincrement())
  userId              Int
  aliexpressUrl       String
  title               String
  description         String?         @db.Text
  aliexpressPrice     Decimal         @db.Decimal(10, 2)
  suggestedPrice      Decimal         @db.Decimal(10, 2)
  finalPrice          Decimal?        @db.Decimal(10, 2)
  category            String?
  images              Json            // Array of image URLs
  productData         Json?           // Full scraped data
  status              ProductStatus   @default(PENDING)
  isPublished         Boolean         @default(false)
  publishedAt         DateTime?
  approvalId          String?         // Marketplace approval ID
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  // Relations
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sales               Sale[]

  @@index([userId, status])
  @@index([status])
  @@map("products")
}

model Sale {
  id                Int             @id @default(autoincrement())
  userId            Int
  productId         Int
  orderId           String          @unique
  marketplace       String          // ebay, mercadolibre, amazon
  salePrice         Decimal         @db.Decimal(10, 2)
  aliexpressCost    Decimal         @db.Decimal(10, 2)
  marketplaceFee    Decimal         @db.Decimal(10, 2)
  grossProfit       Decimal         @db.Decimal(10, 2)
  commissionAmount  Decimal         @db.Decimal(10, 2)
  netProfit         Decimal         @db.Decimal(10, 2)
  status            SaleStatus      @default(PENDING)
  trackingNumber    String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id])
  commission        Commission?

  @@index([userId, status])
  @@index([status])
  @@index([marketplace])
  @@map("sales")
}

model Commission {
  id                Int                 @id @default(autoincrement())
  userId            Int
  saleId            Int                 @unique
  amount            Decimal             @db.Decimal(10, 2)
  status            CommissionStatus    @default(PENDING)
  scheduledPayoutAt DateTime?
  paidAt            DateTime?
  paypalTxnId       String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  sale              Sale                @relation(fields: [saleId], references: [id])

  @@index([userId, status])
  @@index([status])
  @@map("commissions")
}

model Activity {
  id            Int       @id @default(autoincrement())
  userId        Int
  action        String    // login, logout, product_created, sale_completed, etc.
  description   String    @db.Text
  ipAddress     String?
  userAgent     String?   @db.Text
  metadata      Json?     // Additional data
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}
